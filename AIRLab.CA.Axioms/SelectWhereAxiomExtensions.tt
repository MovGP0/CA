<#@ template language="C#" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
//------------------------------------------------------------------------------
// <auto-generated>
// ComputerAlgebra Library

// Copyright © Medvedev Igor, Okulovsky Yuri, Borcheninov Jaroslav, Johann Dirry, 2014
// imedvedev3@gmail.com, yuri.okulovsky@gmail.com, yariksuperman@gmail.com, johann.dirry@aon.at
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using AIRLab.CA.Nodes;

namespace AIRLab.CA.Axioms
{
    public static class SelectWhereAxiomExtensions
    {
<# for(int i = 0; i <= 12; i++) 
{
	var builder = new StringBuilder();

	for(int j = 0; j <= i; j++) 
	{
		builder.Append("T");
		builder.Append(j);
		if(j != i) 
		{
			builder.Append(", ");
		}
	}

	var T = builder.ToString();
#>
        public static Axiom Mod<<#= T #>>(this ISelectWhereAxiom<<#= T #>> axiom, Action<ITypizedDecorArray<<#= T #>>> replace)
<#     for(int j = 0; j <= i; j++) { #>
            where T<#= j #> : INode 
<#     } #>
        {
            return new Axiom(axiom.SelectAxiom.NewAxiom.Name, axiom.SelectAxiom.NewAxiom.Tags, axiom.SelectAxiom.Selector, z => axiom.Invoke(z), z => replace((ITypizedDecorArray<<#= T #>>)z));
        }

<# } #>
    }
}
